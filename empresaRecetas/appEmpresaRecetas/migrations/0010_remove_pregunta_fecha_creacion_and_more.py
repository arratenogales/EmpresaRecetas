# Generated by Django 4.2.6 on 2023-11-28 19:30

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('appEmpresaRecetas', '0009_pregunta_delete_user'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='pregunta',
            name='fecha_creacion',
        ),
        migrations.RemoveField(
            model_name='pregunta',
            name='pregunta',
        ),
        migrations.AddField(
            model_name='pregunta',
            name='accept',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='apellido',
            field=models.CharField(default='', max_length=100),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='detalle',
            field=models.TextField(default=''),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='ingredientes',
            field=models.CharField(default='', max_length=500),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='nombre',
            field=models.CharField(default='', max_length=100),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='nombreReceta',
            field=models.CharField(default='', max_length=100),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='tiempo',
            field=models.IntegerField(default=''),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='tipo',
            field=models.CharField(choices=[('Entrante', 'Entrante'), ('Primero', 'Primero'), ('Segundo', 'Segundo'), ('Postre', 'Postre')], default='', max_length=100),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(max_length=50)),
                ('apellido', models.CharField(max_length=50)),
                ('usuario', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=50)),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('editor', 'Editor'), ('user', 'Usuario')], default='user', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
